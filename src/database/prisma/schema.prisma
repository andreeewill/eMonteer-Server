// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  MECHANIC
  OWNER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
}

enum Vehicle {
  ALL
  CAR
  MOTOR
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  contact_number String?
  password       String
  address        String?
  photo_url      String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  role           Role          @default(CUSTOMER)
  account_status AccountStatus @default(ACTIVE)
  // Relation
  userDetail     UserDetail? // user has one userDetail
  chat           Chat[] // user have many chat room
  order          Order[] // user can have many order

  @@index([email])
}

model UserDetail {
  vendor_id          String  @id @default(uuid())
  identity_url       String?
  is_available       Boolean @default(true)
  chat               Chat[] // mechanics have many chat
  order              Order[] // mechanics can handle many order
  garage             Garage? // owner has one garage
  // Relation
  user               User?   @relation(fields: [user_id], references: [id]) // userDetail belongs to one user
  user_id            String? @unique
  mechanic_garage    Garage? @relation(name: "mechanic_garage", fields: [mechanic_garage_id], references: [id]) // mechanics belongs to 1 garage
  mechanic_garage_id String?
}

model Garage {
  id             String       @id @default(uuid())
  name           String
  address        String
  photo_url      String?
  avg_rating     Float?
  // Hour + minute in ISO 8601 format (ex : 16:47 - 16:47)
  open_hour      String
  // `day` to `day` (ex: monday to sunday)
  open_day       String
  description    String?
  contact_number String
  speciality     Vehicle      @default(ALL)
  is_available   Boolean      @default(true)
  latitude       Float?
  longitude      Float?
  total_mech     Int?
  order          Order[] // garage may have multiple order
  mechanics      UserDetail[] @relation(name: "mechanic_garage") // garage has multiple mechanics
  // Relation
  userDetail     UserDetail?  @relation(fields: [user_detail_id], references: [vendor_id]) // garage belongs to one owner
  user_detail_id String?      @unique
}

model Towing {
  id             String  @id @default(uuid())
  name           String
  contact_number String
  address        String
  latitute       Float
  longitude      Float
  cost_per_km    Float
  open_hours     String
  order          Order[]
}

model Chat {
  id                 String      @id @default(uuid())
  last_message       String?
  last_date_time     DateTime?
  last_signal_source Boolean?
  order              Order? // each order have one chat room
  message            Message[] // chat may have multiple message
  // Relation
  user               User?       @relation(fields: [user_id], references: [id]) // chat belongs to one user
  user_id            String?
  mechanic           UserDetail? @relation(fields: [mechanic_id], references: [vendor_id]) // chat belongs to one mechanic
  mechanic_id        String?
}

model Message {
  id            String   @id @default(uuid())
  message       String
  created_at    DateTime @default(now())
  signal_source Boolean?
  chat          Chat?    @relation(fields: [chat_id], references: [id]) // chat may have many message
  chat_id       String?
}

model CostList {
  id       String  @id @default(uuid())
  quantity Int     @default(1)
  price    Decimal
  // Relation
  order    Order?  @relation(fields: [order_id], references: [id]) // order may have many costlist
  order_id String?
}

model Order {
  id               String      @id @default(uuid())
  trans_start      DateTime    @default(now())
  trans_end        DateTime?
  pickup_latitude  Float
  pickup_longitude Float
  pickup_address   String
  service_cost     Decimal?
  customer_paid    Decimal?
  rating           Float?
  cost_list        CostList[]
  //Relation
  user             User?       @relation(fields: [user_id], references: [id])
  user_id          String?
  mechanic         UserDetail? @relation(fields: [mechanic_id], references: [vendor_id])
  mechanic_id      String?
  garage           Garage?     @relation(fields: [garage_Id], references: [id])
  garage_Id        String?
  chat             Chat?       @relation(fields: [chat_id], references: [id])
  chat_id          String?     @unique
  towing           Towing?     @relation(fields: [towing_id], references: [id])
  towing_id        String?
}
